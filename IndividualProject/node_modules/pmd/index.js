const {app, BrowserWindow, ipcMain} = require('electron')
const fs = require('fs')
const mime = require('mime')
const path = require('path')

const filePath = process.argv[2]
const outputFilePath = process.argv[3]
const lang = process.argv[4]

var isMarkdown = mime.lookup(filePath) == 'text/x-markdown'
var marginsType = isMarkdown ? 0 : 1

global.baseUrl = path.relative(__dirname, path.dirname(filePath))
if (global.baseUrl) {
	global.baseUrl += '/'
}

// Quit when all windows are closed.
app.on('window-all-closed', function () {
	app.quit()
})

var mainWindow = null

app.on('ready', function () {
	mainWindow = new BrowserWindow({ show: false })

	mainWindow.loadURL('file://' + __dirname + '/index.html')

	var webContents = mainWindow.webContents

	webContents.on('did-finish-load', function() {
		var file = fs.readFile(filePath, function (err, data) {
			if (err) {
				throw err
			}

			var d = data.toString()
				.replace(/\\/g, '\\\\')
			    	.replace(/\\\\\_/g, '\\_')

			webContents.send('data', {
				data: d,
				isMarkdown: isMarkdown,
				lang: lang
			})
		})
	})

	ipcMain.on('readyToPrint', function() {
		webContents.printToPDF({
			marginsType: marginsType
		}, function (err, data) {
			if (err) throw err
			fs.writeFile(outputFilePath, data, function (err) {
				if (err) {
					throw err
				}

				console.log('Rendered PDF at ' + outputFilePath);
				// mainWindow.show()
				mainWindow.close()
			})
		})
	})

	mainWindow.on('closed', function() {
		mainWindow = null
	})
})

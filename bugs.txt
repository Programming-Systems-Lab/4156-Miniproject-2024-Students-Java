Here I will list all the bugs that I found in the project and how I solve it.

# In Course class:
1. `return enrollmentCapacity > enrolledStudentCount;`
    - Address: In isCourseFull() method in Course class.
    - Solution: Change the > to <=.
    - Reason: The mothod should return false when the enrolledStudentCount is greater than or equal to the enrollmentCapacity.

2. `return this.instructorName;`
    - Address: In getCourseLocation() method in Course class.
    - Solution: Change instructorName to courseLocation.
    - Reason: The method should return the courseLocation, not the instructorName.

3. `return this.courseLocation;`
    - Address: In getInstructorName() method in Course class.
    - Solution: Change courseLocation to instructorName.
    - Reason: The method should return the instructorName, not the courseLocation.

4. `return false;`
    - Address: In dropStudent() method in Course class.
    - Solution: Add a judgement to return false when course is empty.
    - Reason: The method should return false when the course is empty.

5. `return false;`
    - Address: In enrollStudent() method in Course class.
    - Solution: Add a judgement to return false when course is full.
    - Reason: The method should return false when the course is full.

# In Department class:
1. `return -this.numberOfMajors;`
    - Address: In getNumberOfMajors() method in Department class.
    - Solution: Remove the - sign.
    - Reason: The method should return the number of majors, not the negative number of majors.

2. `return "result.toString()";`
    - Address: In toString() method in Department class.
    - Solution: change it to return result.toString();
    - Reason: The method should return the result of the toString() method, not the string "result.toString()".

3. `return "this.departmentChair";`
    - Address: In getDepartmentChair() method in Department class.
    - Solution: Change it to return this.departmentChair;
    - Reason: The method should return the departmentChair, not the string "this.departmentChair".

# In RouteController class:
1. `return new ResponseEntity<>("Department Not Found", HttpStatus.OK);`
    - Address: In retrieveDepartment() method in RouteController class.
    - Solution: Change HttpStatus.OK to HttpStatus.NOT_FOUND.
    - Reason: The method should return HttpStatus.NOT_FOUND when the department is not found.

2. `return new ResponseEntity<>(departmentMapping.get(deptCode.toUpperCase()).toString(), HttpStatus.NOT_FOUND);`
    - Address: In retrieveDepartment() method in RouteController class.
    - Solution: Change HttpStatus.NOT_FOUND to HttpStatus.OK.
    - Reason: The method should return HttpStatus.OK when the department is found.

3. `return new ResponseEntity<>(departmentMapping.get(deptCode.toUpperCase()).toString(), HttpStatus.OK);`
    - Address: In retrieveDepartment() method in RouteController class.
    - Solution: Change it to return new ResponseEntity<>(departmentMapping.get(deptCode.toUpperCase()), HttpStatus.OK);
    - Reason: The method should return just the object so that the returned value is in JSON format.

4. `return new ResponseEntity<>(coursesMapping.get(Integer.toString(courseCode)).toString(), HttpStatus.FORBIDDEN);`
    - Address: In retrieveCourse() method in RouteController class.
    - Solution: Change HttpStatus.FORBIDDEN to HttpStatus.OK. and delete the toString() method behind the get() method.
    - Reason: The method should return HttpStatus.OK when the course is found, and the returned value should be in JSON format.

5. `return new ResponseEntity<>(requestedCourse.isCourseFull(), HttpStatus.OK);`
    - Address: In isCourseFull() method in RouteController class.
    - Solution: Use a HashMap to return.
    - Reason: The returned response should be in JSON format.

6. `return new ResponseEntity<>("There are: " + -departmentMapping.get(deptCode)
            .getNumberOfMajors() + " majors in the department", HttpStatus.OK);`
    - Address: In getMajorCtFromDept() method in RouteController class.
    - Solution: Change "There are: " + -departmentMapping.get(deptCode).getNumberOfMajors() + " majors in the department" to 
        "{\"majorCt\": " + departmentMapping.get(deptCode).getNumberOfMajors() + "}"
    - Reason: The returned response should be in JSON format, and the num should be positive.

7. `return new ResponseEntity<>(departmentMapping.get(deptCode).getDepartmentChair() + " is "
            + "the department chair.", HttpStatus.OK);`
    - Address: In idDeptChair() method in RouteController class.
    - Solution: Change it to a mannually written JSON format.
    - Reason: The returned response should be in JSON format.

8. `return new ResponseEntity<>(requestedCourse.getCourseLocation() + " is where the course "
            + "is located.", HttpStatus.OK);
    - Address: In findCourseLocation() method in RouteController class.
    - Solution: Change it to a mannually written JSON format.
    - Reason: The returned response should be in JSON format.

9. `return new ResponseEntity<>(requestedCourse.getInstructorName() + " is the instructor for"
            + " the course.", HttpStatus.OK);`
    - Address: In findCourseInstructor() method in RouteController class.
    - Solution: Change it to a HashMap.
    - Reason: The returned response should be in JSON format.

10. `return new ResponseEntity<>("The course meets at: " + "some time ",
            HttpStatus.OK);`
    - Address: In findCourseTime() method in RouteController class.
    - Solution: Change it to a HashMap.
    - Reason: The returned response should be in JSON format.


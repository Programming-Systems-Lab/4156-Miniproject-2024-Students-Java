IndividualProject/src/main/java/dev/coms4156/project/individualproject/Course.java:27:		logic error:		The constructor 'Course()' sets the default value of enrolledStudentCount as 500 instead of 0. We should treat a new course as completely empty when it's first created;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Course.java:35:		logic error:		The method ‘enrollStudent()’ has logical error. It always increments the enrolledStudentCount by 1 even if the course is full, and it always return false without considering if students are enrolled successfully or not;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Course.java:48:		logic error:		The method ‘dropStudent()’ has logical error. It always decrements the enrolledStudentCount by 1 even if there is not student in the course, and it always return false without considering if students are dropped successfully or not;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Course.java:61:		return wrong value:		The method ‘getCourseLocation()’ returns instructor’s name instead of course location;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Course.java:70:		return wrong value:		The method ‘getInstructorName()’ returns course location instead of instructor’s name;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Course.java:107:		static bug: MissingOverride:		The method 'toString()' is missing an @Override annotation;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Couursejava:147:		in-comprehensive logic:		The method 'setEnrolledStudentCount()' doesn't consider the situation when the input count is invalid, such as it is negative or greater than the enrollmentCapacity;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Course.java:159:		logic error and missing situation:		The method ‘isCourseFull()’ sets if enrollmentCapacity is greater than enrolledStudentCount, then the course is full. The logic is wrong and reversed, and doesn’t consider the situation when the enrolledStudentCount = enrollmentCapacity;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:5:		static bug: UnnecessaryImport:		Unused import 'java.util.HashMap’;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:24:		static bug: LooseCoupling:		The constructor ‘Department()’ uses HashMap<String, Course> explicitly without using the more generic Map<String, Course> interface;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:27:		in-comprehensive logic:		The constructor ‘Department()’ doesn’t consider the situation when the input courses is null;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:46:		return wrong value:		The method ‘getNumberOfMajors()’ returns the negative number of this.numberOfMajors, instead of returning this.numberOfMajors; 

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:55:		return wrong value:		The method ‘getDepartmentChair()’ returns the literal string “this.departmentChair” instead of the actual this.departmentChair content;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:64:		static bug: LooseCoupling:		The method ‘getCourseSelection()’ sets the return type to HashMap<String, Course> explicitly without using the more generic Map<String, Course> interface;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:72:		in-comprehensive logic:		The method ‘addPersonToMajor()’ will still increment the number of majors by 1 even if the number of majors is negative;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:83:		logic error:		The method ‘dropPersonFromMajor()’ will still decrement the number of majors by 1 without considering the situation when the number of majors is equal or smaller than 0;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:121:		static bug: MissingOverride:		The method 'toString()' is missing an @Override annotation;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:122:		return wrong value:		The method ‘toString()’ returns the literal string “result.toString()” instead of the actual result.toString() content;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:135:		static bug: LooseCoupling:		The type of the variable ‘courses’ is HashMap<String, Course> explicitly instead of the more generic Map<String, Course> interface;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/Department.java:136:		static bug: UnusedPrivateField:		The private class variable ‘departmentChair' is unused;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/IndividualProjectApplication.java:38:		redundant initialization:		The method ‘run()’ doesn’t check if myFileDatabase has already been initialized, which could cause unintended reinitialization of the database instance;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/IndividualProjectApplication.java:45:		static bug: LiteralsFirstInComparisons:		Position literals first in String comparisons;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/IndividualProjectApplication.java:69:		No Error Handling:		The method ’resetDataFile()’ has no error handling. If there is something goes wrong, there is no way to handle or let the user know;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/IndividualProjectApplication.java:91:		static bug: LooseCoupling:		Avoid using implementation types like 'HashMap'; use the interface instead;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/IndividualProjectApplication.java:101:		static bug: LooseCoupling:		Avoid using implementation types like 'HashMap'; use the interface instead;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/IndividualProjectApplication.java:319:		NullPointerException:		The method ‘onTermination()’ doesn’t consider the situation when myFileDatabase is null or saveData is false, which could lead too a NullPointerException when calling ‘myFileDatabase.saveContentsToFile()’;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:23:		NullPointerException:		The constructor ‘MyFileDatabase()’ sets the departmentMapping to possibly be null when flag == 0, because the method 'deSerializeObjectFromFile() could potentially return null, which leads to NullPointerException;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:36:		static bug: LooseCoupling:		Avoid using implementation types like 'HashMap'; use the interface instead

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:45:		static bug: LooseCoupling:		Avoid using implementation types like 'HashMap'; use the interface instead

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:45:		potential race condition with file access:		The method ‘deSerializeObjectFromFile()’ doesn’t consider the situation when multiple threads attempt to read from the file simultaneously, which could cause data corruption or inconsistent reads;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:45:		unchecked type cast:		The method ‘deSerializeObjectFromFile()’ doesn’t check type cast for HashMap<String, Department>. If the file contents don’t match the expected structure, it will fail at runtime;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:49:		static bug: LooseCoupling:		Avoid using implementation types like 'HashMap'; use the interface instead;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:60:		static bug: ReturnEmptyCollectionRatherThanNull:		Return an empty collection rather than null;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:69:		potential race condition with file access:		The method ‘saveContentsToFile()’ doesn’t consider the situation when multiple threads attempt to write the file simultaneously, which could cause data corruption or inconsistent writes;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:83:		static bug: LooseCoupling:		Avoid using implementation types like 'HashMap'; use the interface instead;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/MyFileDatabase.java:116:		static bug: LooseCoupling:		Avoid using implementation types like 'HashMap'; use the interface instead;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:3:		static bug: UnnecessaryImport:		Unused import 'java.util.HashMap’;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:41:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:46:		static bug: UseLocaleWithCaseConversions:		When doing a String.toLowerCase()/toUpperCase() call, use a Locale;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:47:		wrong status code:		The method ‘retrieveDepartment()’ returns wrong status code, ‘HttpStatus.OK’, when a department is not found;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:50:		static bug: UseLocaleWithCaseConversions:		When doing a String.toLowerCase()/toUpperCase() call, use a Locale;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:50:		wrong status code:		The method ‘retrieveDepartment()’ returns wrong status code, ‘HttpStatus.NOT_FOUND’, when a department is found;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:74:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:75:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:113:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:114:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:126:		wrong status code:		The method ‘retrieveCourse()’ returns wrong status code, ‘HttpStatus.FORBIDDEN’, when a course is found;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:147:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:153:		logic error:		The method ‘getMajorCtFromDept()’ doesn’t return the correct number of majors in the department, there is a negative sign;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:156:		wrong status code:		The method ‘getMajorCtFromDept()’ returns wrong status code, ‘HttpStatus.FORBIDDEN’, when a department is not found;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:173:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:203:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:204:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:242:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:243:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java.294:		logic error:		The method ‘findCourseTime()’ doesn’t return the correct time slot of a course, it returns literal string “some time”;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:281:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:282:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:293:		static bug: UnusedLocalVariable:		Avoid unused local variables such as 'requestedCourse’;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:314:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:341:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:371:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:372:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:389:		wrong status code:		The method ‘dropStudent()’ returns wrong status code, ‘HttpStatus.BAD_REQUEST’, when the operation succeeds but the student isn’t dropped;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:414:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:415:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:416:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:429:		misleading success messages:		The method ‘setEnrollmentCount()’ sets the success message as “Attributed was updated successfully”, which should be “Attribute was updated successfully”;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:452:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:453:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:454:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:467:		misleading success messages:		The method ‘changeCourseTime()’ sets the success message as “Attributed was updated successfully”, which should be “Attribute was updated successfully”;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:491:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:492:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:493:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:506:		misleading success messages:		The method ‘changeCourseTeacher()’ sets the success message as “Attributed was updated successfully”, which should be “Attribute was updated successfully”;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:530:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:531:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:532:		static bug: UnnecessaryAnnotationValueElement:		Avoid the use of value in annotations when its the only element;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:545:		misleading success messages:		The method ‘changeCourseLocation()’ sets the success message as “Attributed was updated successfully”, which should be “Attribute was updated successfully”;

IndividualProject/src/main/java/dev/coms4156/project/individualproject/RouteController.java:556:		wrong status code:		The method ‘handleException()’ returns wrong HTTP status code, HttpStatus.OK, when an error has occurred, which should be HttpStatus.INTERNAL_SERVER_ERROR;
